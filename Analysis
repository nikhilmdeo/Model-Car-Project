Used queries involving concepts such as SUM, COUNT, AVG, JOINS, VIEWS, 





USE mintclassics;
SELECT DISTINCT 
productName,
productCode,
productLine, 
quantityInStock,
warehouseCode,
buyPrice,
MSRP
FROM products 
ORDER BY warehouseCode;
/* 
Executed query to determine which distinct productsName/productLine are being held 
as inventory in which warehouses

Warehouse A --> Motorcycles/Planes (72% capacity)
Warehouse B --> Classic Cars (67% capacity)
Warehouse C --> Vintage Cars (50% capacity)
Warehouse D --> Trucks and Buses/Ships/Trains (75% capacity)
*/

SELECT DISTINCT 
orders.orderDate,
orderdetails.quantityOrdered,
orderdetails.priceEach,
orderdetails.priceEach * orderdetails.quantityOrdered AS costToBuyer,
products.productLine,
products.buyPrice,
products.MSRP
FROM orders
JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber
JOIN products ON orderdetails.productCode = products.productCode
order by costToBuyer DESC;

/* Executed this query to inspect which productLines are proving
to be most profitable for the company by the $ amount ordered over time. */


SELECT DISTINCT
SUM(payments.amount) as totalSpent,
customers.customerName
FROM payments
JOIN customers ON payments.customerNumber = customers.customerNumber
JOIN orders ON customers.customerNumber = orders.customerNumber
GROUP BY customers.customerName;

/* This is an aggregated function to view the total
revenue that was driven in by each customer in the database by 
combining the sum of payments by customer. This can give us a good idea
of who is spending with us and what products they like.*/


SELECT DISTINCT 
orderdetails.productCode, 
SUM(orderdetails.quantityOrdered) AS totalQuantityOrdered, 
SUM(orderdetails.priceEach) AS totalOrderCost,
products.productName,
products.productLine
FROM orderdetails
JOIN products on orderdetails.productCode = products.productCode
GROUP BY products.productCode

/* This statement shows us the $ amount ordered of each product
featured in the companys inventory which is a great insight into
which items in certain productLines are more popular vs. others. */


create view 
employee_accounts
as
SELECT
customerNumber,
customerName,
creditLimit,
salesRepEmployeeNumber,
firstName,
lastName
FROM customers
LEFT JOIN employees ON customers.salesRepEmployeeNumber = employees.employeeNumber
WHERE salesRepEmployeeNumber is not null;

select
firstName,
lastName,
SUM(creditLimit) as creditManaged
from employee_accounts
GROUP BY firstName, lastName


/* Used a JOIN and then turned my query to a view to conduct further analysis.
This query+view shows a report of who within the company is managing the
largest buyers/customers and who overall is managing the most potential
revenue by credit limit of all their clients combined.*/

SELECT DISTINCT 
customerNumber,
AVG(amount) as averageOrderAmount,
ROUND(avg(amount),2) as averageOrderAmount
FROM payments
GROUP BY customerNumber
;

/* Used this query to determine the average order cost made by 
each distinct customer across time. */

SELECT products.productLine,
       COUNT(orderdetails.productCode) AS num_of_sales
FROM products 
JOIN orderdetails 
ON products.productCode = orderdetails.productCode
GROUP BY products.productLine
ORDER BY num_of_sales DESC;

/* This query offers insights into the popularity of
certain items ordered grouped by number of sales of
each product Line rather than $ amount. */
by productLine

create view inventory
as
SELECT
SUM(quantityOrdered) as quantityOfProductOrdered,
quantityInStock,
productLine,
productName
FROM products
JOIN orderdetails ON products.productCode = orderdetails.productCode
GROUP BY quantityInStock, productLine, productName;

SELECT 
SUM(quantityOfProductOrdered),
SUM(quantityInStock),
productLine
FROM inventory
GROUP BY productLine;

/* This query is centered around inventory counts of al products and product lines.
The first query which the view is made of shows which items the company may be overstocking/understocking on based
on discrepancies between amount ordered and amount in stock. The query made using the view shows the same
data but only based on product lines.*/
